{"name": "test_login_DDT", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: chrome not reachable\n  (Session info: chrome=97.0.4692.71)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x00DB6903+2517251]\n\tOrdinal0 [0x00D4F8E1+2095329]\n\tOrdinal0 [0x00C52710+1058576]\n\tOrdinal0 [0x00C476A4+1013412]\n\tOrdinal0 [0x00C47EA8+1015464]\n\tOrdinal0 [0x00C49695+1021589]\n\tOrdinal0 [0x00C43686+996998]\n\tOrdinal0 [0x00C53A60+1063520]\n\tOrdinal0 [0x00CA5382+1397634]\n\tOrdinal0 [0x00C9639B+1336219]\n\tOrdinal0 [0x00C727A7+1189799]\n\tOrdinal0 [0x00C73609+1193481]\n\tGetHandleVerifier [0x00F45904+1577972]\n\tGetHandleVerifier [0x00FF0B97+2279047]\n\tGetHandleVerifier [0x00E46D09+534521]\n\tGetHandleVerifier [0x00E45DB9+530601]\n\tOrdinal0 [0x00D54FF9+2117625]\n\tOrdinal0 [0x00D598A8+2136232]\n\tOrdinal0 [0x00D599E2+2136546]\n\tOrdinal0 [0x00D63541+2176321]\n\tBaseThreadInitThunk [0x76F66739+25]\n\tRtlGetFullPathName_UEx [0x77C28AFF+1215]\n\tRtlGetFullPathName_UEx [0x77C28ACD+1165]", "trace": "self = <testCases.test_Login_DDT_002.Test_Login_DDT_002 object at 0x0000018F798419D0>, setup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"bd9106f5f3318e3583218e38c22d6812\")>\n\n    @pytest.mark.regression\n    def test_login_DDT(self,setup):\n        self.logger.info(\"Starting - Test_Login_DDT_002\")\n        self.driver=setup\n        self.driver.get(self.baseURL)\n        self.logger.info(\"Navigating To Application\")\n        self.loginPageobjects=LoginPage(self.driver)\n    \n        self.logger.info(\"Verifying Login DDT Test\")\n    \n        self.rows=XLUtilies.getRowCount(self.path,'LoginData')\n        self.columns=XLUtilies.getColumnCount(self.path, 'LoginData')\n        print(\"Number of rows in Excel:\",self.rows)\n    \n        dataList=[]    #Empty list Which will store the values after reading the values from Excel sheet\n    \n        for xlRows in range(2,self.rows+1):\n            for xlcols in range(1,self.columns+1):\n             self.userName=XLUtilies.readData(self.path,'LoginData',xlRows,xlcols)\n             self.pwd=XLUtilies.readData(self.path,'LoginData',xlRows,xlcols)\n             self.EXP_Result=XLUtilies.readData(self.path,'LoginData',xlRows,xlcols)\n    \n            self.loginPageobjects.setUserName(self.userName)\n            self.loginPageobjects.setPassword(self.pwd)\n            time.sleep(2)\n>           self.loginPageobjects.clickLogin()\n\ntestCases\\test_Login_DDT_002.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npageObjects\\Login_PageObjects.py:21: in clickLogin\n    self.driver.find_element(By.XPATH,self.button_login_xpath).click()\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1238: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:418: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000018F79841820>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"chrome not reachable\",\"message\":\"chrome not reachable\\\\n  (Session info: ...unk [0x76F66739+25]\\\\n\\\\tRtlGetFullPathName_UEx [0x77C28AFF+1215]\\\\n\\\\tRtlGetFullPathName_UEx [0x77C28ACD+1165]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: chrome not reachable\nE         (Session info: chrome=97.0.4692.71)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x00DB6903+2517251]\nE       \tOrdinal0 [0x00D4F8E1+2095329]\nE       \tOrdinal0 [0x00C52710+1058576]\nE       \tOrdinal0 [0x00C476A4+1013412]\nE       \tOrdinal0 [0x00C47EA8+1015464]\nE       \tOrdinal0 [0x00C49695+1021589]\nE       \tOrdinal0 [0x00C43686+996998]\nE       \tOrdinal0 [0x00C53A60+1063520]\nE       \tOrdinal0 [0x00CA5382+1397634]\nE       \tOrdinal0 [0x00C9639B+1336219]\nE       \tOrdinal0 [0x00C727A7+1189799]\nE       \tOrdinal0 [0x00C73609+1193481]\nE       \tGetHandleVerifier [0x00F45904+1577972]\nE       \tGetHandleVerifier [0x00FF0B97+2279047]\nE       \tGetHandleVerifier [0x00E46D09+534521]\nE       \tGetHandleVerifier [0x00E45DB9+530601]\nE       \tOrdinal0 [0x00D54FF9+2117625]\nE       \tOrdinal0 [0x00D598A8+2136232]\nE       \tOrdinal0 [0x00D599E2+2136546]\nE       \tOrdinal0 [0x00D63541+2176321]\nE       \tBaseThreadInitThunk [0x76F66739+25]\nE       \tRtlGetFullPathName_UEx [0x77C28AFF+1215]\nE       \tRtlGetFullPathName_UEx [0x77C28ACD+1165]\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:243: WebDriverException"}, "attachments": [{"name": "log", "source": "4242e6a3-6746-41f0-a76e-1e68b47ac7c6-attachment.txt", "type": "text/plain"}], "start": 1642494677770, "stop": 1642494708750, "uuid": "0d6f1dbd-9352-4a35-91f7-3e89bd01f92a", "historyId": "f2894d9f0baa66a83cd2ff594f25a22d", "testCaseId": "cbbb4f9fe33bce17fc40addd439c169b", "fullName": "test_Login_DDT_002.Test_Login_DDT_002#test_login_DDT", "labels": [{"name": "tag", "value": "regression"}, {"name": "suite", "value": "test_Login_DDT_002"}, {"name": "subSuite", "value": "Test_Login_DDT_002"}, {"name": "host", "value": "DESKTOP-36JIMOC"}, {"name": "thread", "value": "22524-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_Login_DDT_002"}]}